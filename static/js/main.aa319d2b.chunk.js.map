{"version":3,"sources":["components/Rewards.js","App.js","reportWebVitals.js","index.js"],"names":["Rewards","props","useState","rw","setRw","fetchy","a","fetch","timeFrame","mode","then","res","json","result","data","total","className","App","lat","setLat","long","setLong","setData","dist","setDist","setTimeFrame","useEffect","fetchData","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","spots","map","style","listStyleType","display","flexDirection","margin","name","address","geocode","long_street","long_city","reward_scale","length","type","placeholder","id","onChange","event","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAoBeA,EAlBE,SAACC,GAEhB,MAAoBC,mBAAS,IAA7B,mBAAOC,EAAP,KAAWC,EAAX,KAEMC,EAAM,uCAAG,sBAAAC,EAAA,sDACbC,MAAM,qCAAD,OAAsCN,EAAMK,EAA5C,kCAAuEL,EAAMO,UAA7E,UAA+F,CAACC,KAAK,SACxGC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACZF,MAAK,SAAAG,GACHT,EAAMS,EAAOC,KAAKC,UAJX,2CAAH,qDAWZ,OAFAV,IAEQ,+BAAKF,EAAL,oBAAyB,sBAAMa,UAAU,YAAhB,SAA6Bf,EAAMO,YAA5D,cCwDKS,MArEf,WACE,MAAsBf,mBAAS,IAA/B,mBAAOgB,EAAP,KAAYC,EAAZ,KACA,EAAwBjB,mBAAS,IAAjC,mBAAOkB,EAAP,KAAaC,EAAb,KACA,EAAwBnB,mBAAS,IAAjC,mBAAOY,EAAP,KAAaQ,EAAb,KACA,EAAwBpB,mBAAS,CAAC,MAAlC,mBAAOqB,EAAP,KAAaC,EAAb,KACA,EAAgCtB,mBAAS,KAAzC,mBAAOM,EAAP,KAAiBiB,EAAjB,KAIAC,qBAAU,WACR,IAAMC,EAAS,uCAAG,sBAAArB,EAAA,6DAChBsB,UAAUC,YAAYC,oBAAmB,SAASC,GACjDZ,EAAOY,EAASC,OAAOC,UACvBZ,EAAQU,EAASC,OAAOE,cAHT,SAKV3B,MAAM,2DAAD,OAA4DW,EAA5D,gBAAuEE,EAAvE,qBAAwFG,GAAQ,CAACd,KAAK,SAC9GC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACZF,MAAK,SAAAG,GACJS,EAAQT,EAAOC,SARL,2CAAH,qDAWfa,MAED,CAACT,EAAIE,EAAKG,IAEX,IAAIY,EAAQrB,EAAKsB,KAAI,SAAA9B,GAAC,OAEV,qBAAIU,UAAU,QAAQqB,MAAO,CAACC,cAAc,OAAOC,QAAQ,OAAOC,cAAc,SAASC,OAAO,IAAhG,UAEE,6BAAI,iCAASnC,EAAEoC,SACf,oBAAI1B,UAAU,OAAd,SAAsBV,EAAEqC,UAExB,+CAAkBrC,EAAEsC,QAAQC,eAC5B,wCAAWvC,EAAEsC,QAAQE,aACrB,gDAAmBxC,EAAEyC,gBAErB,cAAC,EAAD,CAASzC,EAAGA,EAAEqC,QAASnC,UAAWA,UAYhD,OACE,sBAAKQ,UAAU,MAAf,UACE,qBAAKA,UAAU,OAChB,mDAGA,2CAAa,sBAAMA,UAAU,WAAhB,SAA4BmB,EAAMa,SAA/C,2BAAqF,uBAAMzB,EAA3F,8BACA,uBAAO0B,KAAK,SAASC,YAAY,QAAQC,GAAG,WAAWC,SAfzC,SAACC,GAClB7B,EAAQ6B,EAAMC,OAAOC,UAelB,yBAAQb,KAAK,YAAYS,GAAG,YAAYC,SAZ3B,SAACC,GACjB5B,EAAa4B,EAAMC,OAAOC,QAWvB,UACE,wBAAQA,MAAM,IAAd,mBACA,wBAAQA,MAAM,IAAd,oBACA,wBAAQA,MAAM,KAAd,wBAGF,6BACEpB,QCvDQqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhD,MAAK,YAAkD,IAA/CiD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.aa319d2b.chunk.js","sourcesContent":["import {useState} from 'react'\r\n\r\nconst Rewards  = (props)=>{\r\n\r\n  const [rw, setRw] = useState([]);\r\n\r\n  const fetchy = async()=>{\r\n    fetch(`https://api.helium.io/v1/hotspots/${props.a}/rewards/sum?min_time=-${props.timeFrame}%20day`,{mode:'cors'})\r\n     .then(res=>res.json())\r\n       .then(result=> {\r\n          setRw(result.data.total);\r\n        });\r\n        \r\n  }\r\n\r\n  fetchy();\r\n\r\n  return (<li>{rw} HNT in the last <span className=\"timeframe\">{props.timeFrame}</span> day(s)</li>);\r\n};\r\n\r\nexport default Rewards;","import './App.css';\nimport React,{ useState, useEffect } from 'react'\nimport Rewards from './components/Rewards';\n\nfunction App() {\n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n  const [dist, setDist] = useState([10000]);\n  const [timeFrame,setTimeFrame] =useState(\"1\") ;\n\n  \n  \n  useEffect(()=>{\n    const fetchData = async()=>{\n      navigator.geolocation.getCurrentPosition(function(position){\n       setLat(position.coords.latitude);\n       setLong(position.coords.longitude);\n      });\n      await fetch(`https://api.helium.io/v1/hotspots/location/distance?lat=${lat}&lon=${long}&distance=${dist}`, {mode:'cors'})\n        .then(res=>res.json())\n          .then(result=>{\n            setData(result.data);  \n          })\n      }\n    fetchData();\n  }\n  ,[lat,long,dist]);\n  \n  let spots = data.map(a=>\n            (\n              <ul className=\"spots\" style={{listStyleType:'none',display:'flex',flexDirection:'column',margin:20}}>\n              \n                <li><strong>{a.name}</strong></li>\n                <li className=\"addy\">{a.address}</li>\n                \n                <li>Street Name: {a.geocode.long_street}</li>\n                <li>City: {a.geocode.long_city}</li>\n                <li>Reward Scale: {a.reward_scale}</li> \n              \n                <Rewards a={a.address} timeFrame={timeFrame}/>\n            </ul>)\n            );\n  \nconst handleChange=(event)=>{\n  setDist(event.target.value) \n};\n\nconst handleRange=(event)=>{\n  setTimeFrame(event.target.value);\n};\n\n  return (\n    <div className=\"App\">\n      <div className=\"bg\"></div>\n     <h1>\n       Hotspots near you\n     </h1>\n     <p>There are <span className=\"distance\">{spots.length}</span> Helium Hotspots within <br/>{dist} meters of your location</p>\n     <input type='number' placeholder='10000' id='distance' onChange={handleChange}/>\n     <select name=\"timeFrame\" id=\"timeFrame\" onChange={handleRange}>\n       <option value='1'>1 Day</option>\n       <option value=\"7\">1 Week</option>\n       <option value=\"30\">1 Month</option>\n     </select>\n\n     <ul>\n      {spots}\n     </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}